**------------------------------------------------------------------- Logistic Regression -------------------------------------------------------------------**

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 1. 데이터 로드
data_path = '/content/drive/MyDrive/ai:x/train.csv'  # 경로에 맞게 수정
df = pd.read_csv(data_path)

# 2. 수치형 변수 리스트 정의
num_cols = [
    'Avg_Working_Hours_Per_Day',
    'Manager_Support',
    'Sleeping_Habit',
    'Job_Satisfaction',
    'Work_Pressure',
    'Social_Person',
    'Exercise_Habit'
]

# 3. 타깃 정규화 (Stress_Level 1~5 → 0~4)
df['Stress_Level'] = df['Stress_Level'] - 1

# 4. 피처/타깃 분리
X = df[num_cols]
y = df['Stress_Level']

# 5. 학습/검증 분할
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 6. 스케일링
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)

# 7. 모델 학습
model = LogisticRegression(
    class_weight='balanced',
    multi_class='multinomial',
    solver='lbfgs',
    max_iter=1000,
    random_state=42
)
model.fit(X_train_scaled, y_train)

# 8. 평가 출력
y_pred = model.predict(X_val_scaled)
print("Accuracy:", accuracy_score(y_val, y_pred))
print("Classification Report:\n", classification_report(y_val, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_val, y_pred))



**------------------------------------------------------------------- Random Forest -------------------------------------------------------------------**

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 1. 데이터 로드
data_path = '/content/drive/MyDrive/ai:x/train.csv'  # 자신의 경로에 맞게 수정
df = pd.read_csv(data_path)

# 2. 수치형 변수 리스트 정의
num_cols = [
    'Avg_Working_Hours_Per_Day',
    'Manager_Support',
    'Sleeping_Habit',
    'Job_Satisfaction',
    'Work_Pressure',
    'Social_Person',
    'Exercise_Habit'
]

# 3. 타깃 정규화 (Stress_Level 1~5 → 0~4)
df['Stress_Level'] = df['Stress_Level'] - 1

# 4. 피처/타깃 분리
X = df[num_cols]
y = df['Stress_Level']

# 5. 학습/검증 분할
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 6. 스케일링 (RandomForest는 필수는 아님, 유지만 함)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)

# 7. Random Forest 모델 학습
model = RandomForestClassifier(
    n_estimators=100,
    max_depth=None,
    random_state=42,
    class_weight='balanced',
    n_jobs=-1
)
model.fit(X_train_scaled, y_train)

# 8. 평가 출력
y_pred = model.predict(X_val_scaled)
print("Accuracy:", accuracy_score(y_val, y_pred))
print("Classification Report:\n", classification_report(y_val, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_val, y_pred))


**------------------------------------------------------------------- CatBoost -------------------------------------------------------------------**

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 1. 데이터 로드
data_path = '/content/drive/MyDrive/ai:x/train.csv'  # 자신의 경로에 맞게 수정
df = pd.read_csv(data_path)

# 2. 수치형 변수 리스트 정의
num_cols = [
    'Avg_Working_Hours_Per_Day',
    'Manager_Support',
    'Sleeping_Habit',
    'Job_Satisfaction',
    'Work_Pressure',
    'Social_Person',
    'Exercise_Habit'
]

# 3. 타깃 정규화 (Stress_Level 1~5 → 0~4)
df['Stress_Level'] = df['Stress_Level'] - 1

# 4. 피처/타깃 분리
X = df[num_cols]
y = df['Stress_Level']

# 5. 학습/검증 분할
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 6. 스케일링 (RandomForest는 필수는 아님, 유지만 함)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)

# 7. Random Forest 모델 학습
model = RandomForestClassifier(
    n_estimators=100,
    max_depth=None,
    random_state=42,
    class_weight='balanced',
    n_jobs=-1
)
model.fit(X_train_scaled, y_train)

# 8. 평가 출력
y_pred = model.predict(X_val_scaled)
print("Accuracy:", accuracy_score(y_val, y_pred))
print("Classification Report:\n", classification_report(y_val, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_val, y_pred))



**------------------------------------------------------------------- XGBoost -------------------------------------------------------------------**

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from xgboost import XGBClassifier

# 1. 데이터 로드
data_path = '/content/drive/MyDrive/ai:x/train.csv'  # 경로 확인 필요
df = pd.read_csv(data_path)

# 2. 수치형 변수 리스트
num_cols = [
    'Avg_Working_Hours_Per_Day',
    'Manager_Support',
    'Sleeping_Habit',
    'Job_Satisfaction',
    'Work_Pressure',
    'Social_Person',
    'Exercise_Habit'
]

# 3. 타깃 정규화 (1~5 → 0~4)
df['Stress_Level'] = df['Stress_Level'] - 1

# 4. 피처 및 타깃 분리
X = df[num_cols]
y = df['Stress_Level']

# 5. 학습/검증 분할
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 6. (선택) 스케일링
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)

# 7. XGBoost 모델 정의 및 학습
model = XGBClassifier(
    objective='multi:softmax',
    num_class=5,
    eval_metric='mlogloss',
    use_label_encoder=False,
    random_state=42
)
model.fit(X_train_scaled, y_train)

# 8. 예측 및 평가
y_pred = model.predict(X_val_scaled)

print("Accuracy:", accuracy_score(y_val, y_pred))
print("Classification Report:\n", classification_report(y_val, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_val, y_pred))



**------------------------------------------------------------------- MLP_Classifier -------------------------------------------------------------------**

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from xgboost import XGBClassifier

# 1. 데이터 로드
data_path = '/content/drive/MyDrive/ai:x/train.csv'  # 경로 확인 필요
df = pd.read_csv(data_path)

# 2. 수치형 변수 리스트
num_cols = [
    'Avg_Working_Hours_Per_Day',
    'Manager_Support',
    'Sleeping_Habit',
    'Job_Satisfaction',
    'Work_Pressure',
    'Social_Person',
    'Exercise_Habit'
]

# 3. 타깃 정규화 (1~5 → 0~4)
df['Stress_Level'] = df['Stress_Level'] - 1

# 4. 피처 및 타깃 분리
X = df[num_cols]
y = df['Stress_Level']

# 5. 학습/검증 분할
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 6. (선택) 스케일링
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)

# 7. XGBoost 모델 정의 및 학습
model = XGBClassifier(
    objective='multi:softmax',
    num_class=5,
    eval_metric='mlogloss',
    use_label_encoder=False,
    random_state=42
)
model.fit(X_train_scaled, y_train)

# 8. 예측 및 평가
y_pred = model.predict(X_val_scaled)

print("Accuracy:", accuracy_score(y_val, y_pred))
print("Classification Report:\n", classification_report(y_val, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_val, y_pred))



**------------------------------------------------------------------- Support Vector Classifier -------------------------------------------------------------------**

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 1. 데이터 로드
data_path = '/content/drive/MyDrive/ai:x/train.csv'  # 경로 확인
df = pd.read_csv(data_path)

# 2. 수치형 변수 리스트
num_cols = [
    'Avg_Working_Hours_Per_Day',
    'Manager_Support',
    'Sleeping_Habit',
    'Job_Satisfaction',
    'Work_Pressure',
    'Social_Person',
    'Exercise_Habit'
]

# 3. 타깃 정규화 (1~5 → 0~4)
df['Stress_Level'] = df['Stress_Level'] - 1

# 4. 피처/타깃 분리
X = df[num_cols]
y = df['Stress_Level']

# 5. 학습/검증 분할
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 6. 스케일링 (필수)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)

# 7. SVM 모델 정의 및 학습
model = SVC(
    kernel='rbf',        # RBF 커널 (비선형)
    C=1.0,               # 정규화 강도
    class_weight='balanced',  # 클래스 불균형 보정
    random_state=42
)
model.fit(X_train_scaled, y_train)

# 8. 평가
y_pred = model.predict(X_val_scaled)
print("Accuracy:", accuracy_score(y_val, y_pred))
print("Classification Report:\n", classification_report(y_val, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_val, y_pred))



**------------------------------------------------------------------- Linear Discriminant Analysis -------------------------------------------------------------------**

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# 1. 데이터 로드
data_path = '/content/drive/MyDrive/ai:x/train.csv'
df = pd.read_csv(data_path)

# 2. 수치형 변수 정의
num_cols = [
    'Avg_Working_Hours_Per_Day',
    'Manager_Support',
    'Sleeping_Habit',
    'Job_Satisfaction',
    'Work_Pressure',
    'Social_Person',
    'Exercise_Habit'
]

# 3. 타깃 정규화
df['Stress_Level'] = df['Stress_Level'] - 1

# 4. 피처/타깃 분리
X = df[num_cols]
y = df['Stress_Level']

# 5. 학습/검증 분할
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 6. 스케일링 (권장)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)

# 7. LDA 모델 학습
model = LinearDiscriminantAnalysis()
model.fit(X_train_scaled, y_train)

# 8. 평가
y_pred = model.predict(X_val_scaled)
print("Accuracy:", accuracy_score(y_val, y_pred))
print("Classification Report:\n", classification_report(y_val, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_val, y_pred))
